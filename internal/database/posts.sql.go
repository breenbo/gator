// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (id, title, url, description, created_at, updated_at, published_at, feed_id)
VALUES ($1, $2, $3, $4,  $5, $6, $7, $8)
`

type CreatePostParams struct {
	ID          string
	Title       string
	Url         string
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	PublishedAt sql.NullTime
	FeedID      sql.NullString
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PublishedAt,
		arg.FeedID,
	)
	return err
}

const getPostForUser = `-- name: GetPostForUser :many
SELECT posts.id, posts.title, posts.url, posts.description, posts.created_at, posts.updated_at, posts.published_at, posts.feed_id, feeds.name AS feed_name FROM posts
JOIN feed_follows ON feed_follows.feed_id = posts.feed_id
JOIN feeds ON posts.feed_id = feeds.id
WHERE feed_follows.user_id = $1
ORDER BY posts.published_at DESC
LIMIT $2
`

type GetPostForUserParams struct {
	UserID string
	Limit  int32
}

type GetPostForUserRow struct {
	ID          string
	Title       string
	Url         string
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	PublishedAt sql.NullTime
	FeedID      sql.NullString
	FeedName    string
}

func (q *Queries) GetPostForUser(ctx context.Context, arg GetPostForUserParams) ([]GetPostForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostForUserRow
	for rows.Next() {
		var i GetPostForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.FeedID,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
