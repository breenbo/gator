// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"time"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING id, created_at, updated_at, name, url, user_id
`

type CreateFeedParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedIDFromURL = `-- name: GetFeedIDFromURL :one
SELECT id FROM feeds
WHERE url = $1
`

func (q *Queries) GetFeedIDFromURL(ctx context.Context, url string) (string, error) {
	row := q.db.QueryRowContext(ctx, getFeedIDFromURL, url)
	var id string
	err := row.Scan(&id)
	return id, err
}

const listFeed = `-- name: ListFeed :many
SELECT feeds.name, feeds.url, users.name as userName
FROM feeds
JOIN users ON users.id = feeds.user_id
`

type ListFeedRow struct {
	Name     string
	Url      string
	Username string
}

func (q *Queries) ListFeed(ctx context.Context) ([]ListFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedRow
	for rows.Next() {
		var i ListFeedRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
